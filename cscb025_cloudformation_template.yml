AWSTemplateFormatVersion: '2017-11-03'
Description: 'AWS Cloudformation template to create LAMP Stack'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  DBName:
    Default: MyDatabase
    Description: MySQL database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBUser:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBPassword:
    NoEcho: 'true'
    Description: Password for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  DBRootPassword:
    NoEcho: 'true'
    Description: Root password for MySQL
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: ' The IP address range that can be used to SSH to the EC2 instances'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  AWSInstanceType2Arch:
    t2.micro:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t2.micro:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    us-east-1:
      PV64: ami-22111148
      HVM64: ami-08111162
      HVMG2: ami-ebcec381
    us-west-2:
      PV64: ami-792bc219
      HVM64: ami-c229c0a2
      HVMG2: ami-0f28c06f
    us-west-1:
      PV64: ami-0e087a6e
      HVM64: ami-1b0f7d7b
      HVMG2: ami-ab9defcb
    eu-west-1:
      PV64: ami-a5368cd6
      HVM64: ami-31328842
      HVMG2: ami-d1d652a2
    eu-central-1:
      PV64: ami-2bde3944
      HVM64: ami-e2df388d
      HVMG2: ami-5240a73d
    ap-northeast-1:
      PV64: ami-37020959
      HVM64: ami-f80e0596
      HVMG2: ami-34a9a35a
    ap-northeast-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-6598510b
      HVMG2: NOT_SUPPORTED
    ap-southeast-1:
      PV64: ami-ff0cc79c
      HVM64: ami-e90dc68a
      HVMG2: ami-6f6ca70c
    ap-southeast-2:
      PV64: ami-f5210196
      HVM64: ami-f2210191
      HVMG2: ami-88c1e1eb
    sa-east-1:
      PV64: ami-661e930a
      HVM64: ami-1e159872
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      PV64: ami-08ef2465
      HVM64: ami-49e22924
      HVMG2: NOT_SUPPORTED
Resources:
  WebServerInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
          - Install
          - Configure
        Install:
          packages:
            yum:
              git: []
              mysql: []
              mysql-server: []
              mysql-libs: []
              httpd: []
              php: []
              php-mysql: []
            /tmp/setup.mysql:
              content: !Join ['', ['CREATE DATABASE ', !Ref 'DBName', ';

                    ', 'GRANT ALL ON ', !Ref 'DBName', .* TO ', !Ref 'DBUser', '''@localhost
                    IDENTIFIED BY ''', !Ref 'DBPassword', ''';

                    ']]
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Join ['', ['[main]

                    ', stack=, !Ref 'AWS::StackId', '

                    ', region=, !Ref 'AWS::Region', '

                    ']]
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join ['', ['[cfn-auto-reloader-hook]

                    ', 'triggers=post.update

                    ', 'path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init

                    ', 'action=/opt/aws/bin/cfn-init -v ', '         --stack ', !Ref 'AWS::StackName',
                  '         --resource WebServerInstance ', '         --configsets
                    InstallAndRun ', '         --region ', !Ref 'AWS::Region', '

                    ', 'runas=root

                    ']]
          services:
            sysvinit:
              mysqld:
                enabled: 'true'
                ensureRunning: 'true'
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        Configure:
          commands:
            01_set_mysql_root_password:
              command: !Join ['', [mysqladmin -u root password ', !Ref 'DBRootPassword',
                  '''']]
              test: !Join ['', ['$(mysql ', !Ref 'DBName', ' -u root --password=''',
                  !Ref 'DBRootPassword', ''' >/dev/null 2>&1 </dev/null); (( $? !=
                    0 ))']]
            02_create_database:
              command: !Join ['', [mysql -u root --password=', !Ref 'DBRootPassword',
                  ''' < /tmp/setup.mysql']]
              test: !Join ['', ['$(mysql ', !Ref 'DBName', ' -u root --password=''',
                  !Ref 'DBRootPassword', ''' >/dev/null 2>&1 </dev/null); (( $? !=
                    0 ))']]
           03_download_project:
             command: 'git clone https://github.com/miglen/CSCB025.git'
    Properties:
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch,
          !Ref 'InstanceType', Arch]]
      InstanceType: !Ref 'InstanceType'
      SecurityGroups:
      - !Ref 'WebServerSecurityGroup'
      KeyName: !Ref 'KeyName'
      UserData: !Base64
        Fn::Join:
        - ''
        - - '#!/bin/bash -xe

            '
          - 'yum update -y aws-cfn-bootstrap

            '
          - '# Install the files and packages from the metadata

            '
          - '/opt/aws/bin/cfn-init -v '
          - '         --stack '
          - !Ref 'AWS::StackName'
          - '         --resource WebServerInstance '
          - '         --configsets InstallAndRun '
          - '         --region '
          - !Ref 'AWS::Region'
          - '

            '
          - '# Signal the status from cfn-init

            '
          - '/opt/aws/bin/cfn-signal -e $? '
          - '         --stack '
          - !Ref 'AWS::StackName'
          - '         --resource WebServerInstance '
          - '         --region '
          - !Ref 'AWS::Region'
          - '

            '
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref 'SSHLocation'
Outputs:
  WebsiteURL:
    Description: URL for newly created LAMP stack
    Value: !Join ['', ['http://', !GetAtt [WebServerInstance, PublicDnsName]]]
